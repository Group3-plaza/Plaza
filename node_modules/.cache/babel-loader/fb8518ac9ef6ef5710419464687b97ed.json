{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/Plaza/src/Canvas.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable func-names */\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable no-unused-vars */\n// Canvas that will display current pixel data.\nimport './Canvas.css';\nimport React, { useState, useEffect, useRef } from 'react'; // eslint-disable-next-line import/no-cycle\n\nimport { socket } from './App';\nimport loadingCircle from './graphics/loading_circle.gif'; // eslint-disable-next-line import/prefer-default-export\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Canvas(props) {\n  _s();\n\n  // STATES\n  const [mode, setMode] = useState(0); // current mode of canvas:\n  //  0 - Obtaining canvas data...\n  //  1 - Timeout obtaining canvas data...\n  //  2 - Success loading\n\n  const [hasRequested, setHasRequested] = useState(false);\n  const [enabled, setEnabled] = useState(false); // set this to True to be able to click on canvas\n\n  const [data, setData] = useState([]); // contains pixel data\n  // contains width (width=height) of canvas displayed pixels\n\n  const [canvasSize, setCanvasSize] = useState(0); // use refs to fix issues with accessing states from listeners...\n  // https://medium.com/geographit/accessing-react-state-in-event-listeners-with-usestate-and-useref-hooks-8cceee73c559\n\n  const [selectedPixel, _setSelectedPixel] = useState([-1, -1]);\n  const selectedPixelRef = useRef(selectedPixel);\n\n  const setSelectedPixel = value => {\n    selectedPixelRef.current = value;\n\n    _setSelectedPixel(value);\n  };\n\n  let canvasRef;\n  const canvasCtx = useRef(null);\n  let canvasWidth;\n  let canvasHeight;\n  const canvasPlaceholderRef = useRef(null);\n  let responseTimeout;\n\n  function placePixel() {\n    // send a socketio emit canvas_set\n    if (selectedPixelRef.current[0] !== -1 && selectedPixelRef.current[1] !== -1 && props.selectedColor.current !== -1) {\n      socket.emit('canvas_set', {\n        x: selectedPixelRef.current[1],\n        y: selectedPixelRef.current[0],\n        color: props.selectedColor.current\n      });\n    }\n  } // convert color index to rgb\n\n\n  function toColor(x, iseSelected) {\n    if (x === 0) {\n      return [255, 0, 0];\n    }\n\n    if (x === 1) {\n      return [255, 69, 0];\n    }\n\n    if (x === 2) {\n      return [255, 165, 0];\n    }\n\n    if (x === 3) {\n      return [255, 174, 66];\n    }\n\n    if (x === 4) {\n      return [255, 255, 0];\n    }\n\n    if (x === 5) {\n      return [154, 205, 50];\n    }\n\n    if (x === 6) {\n      return [0, 255, 0];\n    }\n\n    if (x === 7) {\n      return [13, 152, 186];\n    }\n\n    if (x === 8) {\n      return [0, 0, 255];\n    }\n\n    if (x === 9) {\n      return [138, 43, 226];\n    }\n\n    if (x === 10) {\n      return [238, 130, 238];\n    }\n\n    if (x === 11) {\n      return [199, 21, 133];\n    }\n\n    if (x === 12) {\n      return [255, 255, 255];\n    }\n\n    if (x === 13) {\n      return [0, 0, 0];\n    }\n\n    return [255, 0, 255]; // index out of bounds\n  } // uses 'data' state to create pixels\n\n\n  function redraw() {\n    const context = canvasCtx.current;\n    let i = 0; // const canvasWidth = canvasRef.width;\n    // const canvasHeight = canvasRef.height;\n\n    const pixelWidth = canvasHeight / canvasSize;\n    const pixelHeight = canvasHeight / canvasSize;\n    const p1 = context.transformedPoint(0, 0);\n    const p2 = context.transformedPoint(canvasWidth, canvasHeight);\n    context.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n\n    for (let x = 0; x < canvasSize; x += 1) {\n      for (let y = 0; y < canvasSize; y += 1) {\n        const color = toColor(data[i]);\n        i += 1;\n        context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n        context.fillRect(x * pixelWidth + x, y * pixelHeight + y, pixelWidth, pixelHeight);\n      }\n    } // draw selected pixel:\n\n\n    if (props.selectedColor.current !== -1 && selectedPixelRef.current[0] !== -1 && selectedPixelRef.current[1] !== -1) {\n      // set up shadow:\n      context.shadowColor = 'black';\n      context.shadowBlur = 15;\n      const color = toColor(props.selectedColor.current);\n      context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n      context.fillRect(selectedPixelRef.current[0] * pixelWidth + selectedPixelRef.current[0], selectedPixelRef.current[1] * pixelHeight + selectedPixelRef.current[1], pixelWidth, pixelHeight); // remove shadow:\n\n      context.shadowColor = null;\n      context.shadowBlur = 0;\n    }\n  } // like redraw() but also returns coordinates of upper-left & lower-right corners\n\n\n  function firstRedraw() {\n    const context = canvasRef.getContext('2d');\n    let i = 0; // const canvasWidth = canvasRef.width;\n    // const canvasHeight = canvasRef.height;\n\n    const pixelWidth = canvasHeight / canvasSize;\n    const pixelHeight = canvasHeight / canvasSize;\n    const p1 = context.transformedPoint(0, 0);\n    const p2 = context.transformedPoint(canvasWidth, canvasHeight);\n    context.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n    let ulCorner;\n    let lrCorner;\n\n    for (let x = 0; x < canvasSize; x += 1) {\n      for (let y = 0; y < canvasSize; y += 1) {\n        const color = toColor(data[i]);\n        i += 1;\n        context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n        context.fillRect(x * pixelWidth + x, y * pixelHeight + y, pixelWidth, pixelHeight);\n\n        if (x === 0 && y === 0) {\n          ulCorner = x * pixelWidth + x;\n        } else if (x === canvasSize - 1 && y === canvasSize - 1) {\n          lrCorner = x * pixelWidth + x + pixelWidth;\n        }\n      }\n    }\n\n    return [ulCorner, lrCorner, pixelWidth];\n  } // When canvas is loaded\n\n\n  useEffect(() => {\n    // receive socketio canvas_state\n    socket.on('canvas_state', receivedData => {\n      if (mode === 0) {\n        clearTimeout(responseTimeout); // obtain data and decode it from base 64 string:\n\n        const encoded = receivedData.data; // decode to bytes\n\n        const decoded = Uint8Array.from(atob(encoded), c => c.charCodeAt(0));\n        console.log(`set data to ${decoded}`);\n        setData(decoded);\n        setCanvasSize(receivedData.size);\n        setMode(2);\n        props.setCanvasLoadState(true);\n      }\n    });\n\n    if (mode === 2) {\n      // receive socketio canvas_update\n      socket.on('canvas_update', receivedData => {\n        // update data:\n        const dataCopy = data;\n        dataCopy[receivedData.x + receivedData.y * canvasSize] = receivedData.color;\n        console.log(`placed pixel at ${receivedData.x}, ${receivedData.y}`);\n        setData(data);\n        redraw();\n      });\n      canvasRef = document.getElementById('canvas');\n      canvasCtx.current = canvasRef.getContext('2d'); // eslint-disable-next-line no-use-before-define\n\n      initializeCanvasManipulation();\n    }\n  }, [mode]); // send socketio request on load:\n\n  useEffect(() => {\n    if (mode === 0 && !hasRequested) {\n      setTimeout(() => {\n        socket.emit('canvas_request', {});\n        setHasRequested(true);\n        console.log('emitted canvas request');\n        responseTimeout = setTimeout(() => {\n          setMode(1);\n        }, 5000);\n      }, 1000);\n    }\n  }); // generate random board for testing\n\n  function test() {\n    const TESTING_SIZE = 50;\n    setCanvasSize(TESTING_SIZE);\n    const a = new Uint8ClampedArray(TESTING_SIZE * TESTING_SIZE);\n\n    for (let x = 0; x < TESTING_SIZE * TESTING_SIZE; x += 1) {\n      // eslint-disable-next-line no-bitwise\n      a[x] = Math.random() * (13 - 0 + 1) << 0; // generate random int between 0 & 13\n    }\n\n    setData(a);\n    setMode(2);\n    props.setCanvasLoadState(true);\n  }\n\n  if (mode === 0) {\n    // CANVAS INFO NOT YET LOADED\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"canvas\",\n      className: \"canvas_placeholder\",\n      ref: canvasPlaceholderRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"placeholder_content\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadingCircle,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (mode === 1) {\n    // TIMEOUT OBTAINING CANVAS DATA FROM SERVER\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"canvas\",\n      className: \"canvas_placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: 40\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Unable to Load Canvas :(\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"We were unable to get canvas data from our servers. Try reloading the page or trying again later.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: test,\n            children: \"Continue anyway\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (mode === 2) {\n    // SUCESSFULLY LOADED CANVAS DATA FROM SERVER\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this);\n  } // use current mouse position on canvas to determine which pixel is being hovered over\n\n\n  function higlightSelected(ctx, x, y, canvasRenderWidth) {\n    const pt = ctx.transformedPoint(x, y);\n    const newSel = [// eslint-disable-next-line no-mixed-operators\n    Math.trunc(pt.x / canvasRenderWidth * canvasSize), // eslint-disable-next-line no-mixed-operators\n    Math.trunc(pt.y / canvasRenderWidth * canvasSize)];\n\n    if (props.selectedColor.current === -1 || newSel[0] <= -2 || newSel[1] <= -2 || newSel[0] > canvasSize - 1 || newSel[1] > canvasSize - 1) {\n      canvasRef.style.cursor = 'default';\n      setSelectedPixel([-1, -1]);\n      return false;\n    }\n\n    canvasRef.style.cursor = 'none';\n\n    if (newSel[0] === selectedPixel[0] && newSel[1] === selectedPixel[1]) {\n      return false;\n    }\n\n    setSelectedPixel(newSel);\n    return true;\n  }\n\n  function initializeCanvasManipulation() {\n    // IMPLEMENT CANVAS PANNING/ZOOMING     http://phrogz.net/tmp/canvas_zoom_to_cursor.html\n    const canvas = canvasRef; // automatically resize canvas\n\n    canvas.width = window.innerWidth - 240;\n    canvas.height = window.innerHeight;\n    canvasWidth = window.innerWidth - 240;\n    canvasHeight = window.innerHeight;\n\n    window.onresize = () => {\n      canvas.width = window.innerWidth - 240;\n      canvas.height = window.innerHeight;\n      canvasWidth = canvas.width;\n      canvasHeight = canvas.height;\n      trackTransforms(canvasCtx.current);\n      canvasCtx.current.translate(canvas.width / 4, 0);\n      redraw();\n    };\n\n    trackTransforms(canvasCtx.current);\n    canvasCtx.current.translate(canvas.width / 4, 0);\n    const [upperLeftCornerCoords, lowerRightCornerCoords, pixelWidth] = firstRedraw();\n    const canvasRenderWidth = lowerRightCornerCoords - upperLeftCornerCoords;\n    let lastX = canvas.width / 2;\n    let lastY = canvas.height / 2;\n    let dragStart;\n    let dragged;\n    window.addEventListener('mouseup', evt => {\n      if (dragStart) {\n        dragStart = false;\n      }\n\n      if (!dragged) {\n        placePixel();\n      }\n    }, false);\n    canvas.addEventListener('mousedown', evt => {\n      // eslint-disable-next-line no-multi-assign\n      document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';\n      lastX = evt.offsetX || evt.pageX - canvas.offsetLeft;\n      lastY = evt.offsetY || evt.pageY - canvas.offsetTop;\n      dragStart = canvasCtx.current.transformedPoint(lastX, lastY);\n      dragged = false;\n    }, false);\n    canvas.addEventListener('mousemove', evt => {\n      lastX = evt.offsetX || evt.pageX - canvas.offsetLeft;\n      lastY = evt.offsetY || evt.pageY - canvas.offsetTop;\n      dragged = true;\n\n      if (dragStart) {\n        const pt = canvasCtx.current.transformedPoint(lastX, lastY);\n        canvasCtx.current.translate(pt.x - dragStart.x, pt.y - dragStart.y);\n        redraw();\n      } else {\n        // highlight pixel:\n        // eslint-disable-next-line no-lonely-if\n        if (higlightSelected(canvasCtx.current, evt.offsetX, evt.offsetY, canvasRenderWidth)) {\n          redraw();\n        }\n      }\n    }, false);\n    canvas.addEventListener('mouseup', evt => {\n      dragStart = null; // if (!dragged) zoom(evt.shiftKey ? -1 : 1);\n    }, false);\n    canvas.addEventListener('mouseleave', evt => {\n      setSelectedPixel([-1, -1]);\n      redraw();\n    });\n    const scaleFactor = 1.05; // eslint-disable-next-line vars-on-top\n\n    const zoom = function (clicks) {\n      const pt = canvasCtx.current.transformedPoint(lastX, lastY);\n      canvasCtx.current.translate(pt.x, pt.y); // eslint-disable-next-line no-restricted-properties\n\n      const factor = Math.pow(scaleFactor, clicks);\n      canvasCtx.current.scale(factor, factor);\n      canvasCtx.current.translate(-pt.x, -pt.y);\n      redraw();\n    };\n\n    const handleScroll = function (evt) {\n      // eslint-disable-next-line no-nested-ternary\n      const delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;\n      if (delta) zoom(delta);\n      return evt.preventDefault() && false;\n    };\n\n    canvas.addEventListener('DOMMouseScroll', handleScroll, false);\n    canvas.addEventListener('mousewheel', handleScroll, false);\n  } // Adds ctx.getTransform() - returns an SVGMatrix\n  // Adds ctx.transformedPoint(x,y) - returns an SVGPoint\n\n\n  function trackTransforms(ctx) {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    let xform = svg.createSVGMatrix();\n\n    ctx.getTransform = function () {\n      return xform;\n    };\n\n    const savedTransforms = [];\n    const {\n      save\n    } = ctx;\n\n    ctx.save = function () {\n      savedTransforms.push(xform.translate(0, 0));\n      return save.call(ctx);\n    };\n\n    const {\n      restore\n    } = ctx;\n\n    ctx.restore = function () {\n      xform = savedTransforms.pop();\n      return restore.call(ctx);\n    };\n\n    const {\n      scale\n    } = ctx;\n\n    ctx.scale = function (sx, sy) {\n      xform = xform.scaleNonUniform(sx, sy);\n      return scale.call(ctx, sx, sy);\n    };\n\n    const {\n      rotate\n    } = ctx;\n\n    ctx.rotate = function (radians) {\n      // eslint-disable-next-line no-mixed-operators\n      xform = xform.rotate(radians * 180 / Math.PI);\n      return rotate.call(ctx, radians);\n    };\n\n    const {\n      translate\n    } = ctx;\n\n    ctx.translate = function (dx, dy) {\n      xform = xform.translate(dx, dy);\n      return translate.call(ctx, dx, dy);\n    };\n\n    const {\n      transform\n    } = ctx;\n\n    ctx.transform = function (a, b, c, d, e, f) {\n      const m2 = svg.createSVGMatrix();\n      m2.a = a;\n      m2.b = b;\n      m2.c = c;\n      m2.d = d;\n      m2.e = e;\n      m2.f = f;\n      xform = xform.multiply(m2);\n      return transform.call(ctx, a, b, c, d, e, f);\n    };\n\n    const {\n      setTransform\n    } = ctx;\n\n    ctx.setTransform = function (a, b, c, d, e, f) {\n      xform.a = a;\n      xform.b = b;\n      xform.c = c;\n      xform.d = d;\n      xform.e = e;\n      xform.f = f;\n      return setTransform.call(ctx, a, b, c, d, e, f);\n    };\n\n    const pt = svg.createSVGPoint();\n\n    ctx.transformedPoint = function (x, y) {\n      pt.x = x;\n      pt.y = y;\n      return pt.matrixTransform(xform.inverse());\n    };\n  }\n}\n\n_s(Canvas, \"NhE+w+UfyB8yNasZbKm9+0LHCDg=\");\n\n_c = Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/ec2-user/environment/Plaza/src/Canvas.js"],"names":["React","useState","useEffect","useRef","socket","loadingCircle","Canvas","props","mode","setMode","hasRequested","setHasRequested","enabled","setEnabled","data","setData","canvasSize","setCanvasSize","selectedPixel","_setSelectedPixel","selectedPixelRef","setSelectedPixel","value","current","canvasRef","canvasCtx","canvasWidth","canvasHeight","canvasPlaceholderRef","responseTimeout","placePixel","selectedColor","emit","x","y","color","toColor","iseSelected","redraw","context","i","pixelWidth","pixelHeight","p1","transformedPoint","p2","clearRect","fillStyle","fillRect","shadowColor","shadowBlur","firstRedraw","getContext","ulCorner","lrCorner","on","receivedData","clearTimeout","encoded","decoded","Uint8Array","from","atob","c","charCodeAt","console","log","size","setCanvasLoadState","dataCopy","document","getElementById","initializeCanvasManipulation","setTimeout","test","TESTING_SIZE","a","Uint8ClampedArray","Math","random","padding","higlightSelected","ctx","canvasRenderWidth","pt","newSel","trunc","style","cursor","canvas","width","window","innerWidth","height","innerHeight","onresize","trackTransforms","translate","upperLeftCornerCoords","lowerRightCornerCoords","lastX","lastY","dragStart","dragged","addEventListener","evt","body","mozUserSelect","webkitUserSelect","userSelect","offsetX","pageX","offsetLeft","offsetY","pageY","offsetTop","scaleFactor","zoom","clicks","factor","pow","scale","handleScroll","delta","wheelDelta","detail","preventDefault","svg","createElementNS","xform","createSVGMatrix","getTransform","savedTransforms","save","push","call","restore","pop","sx","sy","scaleNonUniform","rotate","radians","PI","dx","dy","transform","b","d","e","f","m2","multiply","setTransform","createSVGPoint","matrixTransform","inverse"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable no-unused-vars */\n\n// Canvas that will display current pixel data.\nimport './Canvas.css';\nimport React, { useState, useEffect, useRef } from 'react';\n// eslint-disable-next-line import/no-cycle\nimport { socket } from './App';\nimport loadingCircle from './graphics/loading_circle.gif';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function Canvas(props) {\n    // STATES\n    const [mode, setMode] = useState(0); // current mode of canvas:\n    //  0 - Obtaining canvas data...\n    //  1 - Timeout obtaining canvas data...\n    //  2 - Success loading\n\n    const [hasRequested, setHasRequested] = useState(false);\n\n    const [enabled, setEnabled] = useState(false); // set this to True to be able to click on canvas\n    const [data, setData] = useState([]); // contains pixel data\n    // contains width (width=height) of canvas displayed pixels\n    const [canvasSize, setCanvasSize] = useState(0);\n\n    // use refs to fix issues with accessing states from listeners...\n    // https://medium.com/geographit/accessing-react-state-in-event-listeners-with-usestate-and-useref-hooks-8cceee73c559\n    const [selectedPixel, _setSelectedPixel] = useState([-1, -1]);\n    const selectedPixelRef = useRef(selectedPixel);\n    const setSelectedPixel = (value) => {\n        selectedPixelRef.current = value;\n        _setSelectedPixel(value);\n    };\n\n    let canvasRef;\n    const canvasCtx = useRef(null);\n    let canvasWidth;\n    let canvasHeight;\n\n    const canvasPlaceholderRef = useRef(null);\n    let responseTimeout;\n\n    function placePixel() {\n        // send a socketio emit canvas_set\n        if (selectedPixelRef.current[0] !== -1 && selectedPixelRef.current[1] !== -1\n            && props.selectedColor.current !== -1) {\n            socket.emit('canvas_set', {\n                x: selectedPixelRef.current[1],\n                y: selectedPixelRef.current[0],\n                color: props.selectedColor.current,\n            });\n        }\n    }\n\n    // convert color index to rgb\n    function toColor(x, iseSelected) {\n        if (x === 0) {\n            return [255, 0, 0];\n        } if (x === 1) {\n            return [255, 69, 0];\n        } if (x === 2) {\n            return [255, 165, 0];\n        } if (x === 3) {\n            return [255, 174, 66];\n        } if (x === 4) {\n            return [255, 255, 0];\n        } if (x === 5) {\n            return [154, 205, 50];\n        } if (x === 6) {\n            return [0, 255, 0];\n        } if (x === 7) {\n            return [13, 152, 186];\n        } if (x === 8) {\n            return [0, 0, 255];\n        } if (x === 9) {\n            return [138, 43, 226];\n        } if (x === 10) {\n            return [238, 130, 238];\n        } if (x === 11) {\n            return [199, 21, 133];\n        } if (x === 12) {\n            return [255, 255, 255];\n        } if (x === 13) {\n            return [0, 0, 0];\n        }\n        return [255, 0, 255]; // index out of bounds\n    }\n    // uses 'data' state to create pixels\n    function redraw() {\n        const context = canvasCtx.current;\n        let i = 0;\n\n        // const canvasWidth = canvasRef.width;\n        // const canvasHeight = canvasRef.height;\n\n        const pixelWidth = (canvasHeight / canvasSize);\n        const pixelHeight = (canvasHeight / canvasSize);\n\n        const p1 = context.transformedPoint(0, 0);\n        const p2 = context.transformedPoint(canvasWidth, canvasHeight);\n        context.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n\n        for (let x = 0; x < canvasSize; x += 1) {\n            for (let y = 0; y < canvasSize; y += 1) {\n                const color = toColor(data[i]);\n                i += 1;\n                context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n                context.fillRect(x * pixelWidth + x, y * pixelHeight + y,\n                    pixelWidth, pixelHeight);\n            }\n        }\n\n        // draw selected pixel:\n        if (props.selectedColor.current !== -1 && selectedPixelRef.current[0] !== -1\n            && selectedPixelRef.current[1] !== -1) {\n            // set up shadow:\n            context.shadowColor = 'black';\n            context.shadowBlur = 15;\n\n            const color = toColor(props.selectedColor.current);\n            context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n            context.fillRect(selectedPixelRef.current[0] * pixelWidth + selectedPixelRef.current[0],\n                selectedPixelRef.current[1] * pixelHeight + selectedPixelRef.current[1],\n                pixelWidth, pixelHeight);\n\n            // remove shadow:\n            context.shadowColor = null;\n            context.shadowBlur = 0;\n        }\n    }\n    // like redraw() but also returns coordinates of upper-left & lower-right corners\n    function firstRedraw() {\n        const context = canvasRef.getContext('2d');\n        let i = 0;\n\n        // const canvasWidth = canvasRef.width;\n        // const canvasHeight = canvasRef.height;\n\n        const pixelWidth = (canvasHeight / canvasSize);\n        const pixelHeight = (canvasHeight / canvasSize);\n\n        const p1 = context.transformedPoint(0, 0);\n        const p2 = context.transformedPoint(canvasWidth, canvasHeight);\n        context.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n\n        let ulCorner;\n        let lrCorner;\n\n        for (let x = 0; x < canvasSize; x += 1) {\n            for (let y = 0; y < canvasSize; y += 1) {\n                const color = toColor(data[i]);\n                i += 1;\n                context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n                context.fillRect(x * pixelWidth + x, y * pixelHeight + y, pixelWidth, pixelHeight);\n\n                if (x === 0 && y === 0) {\n                    ulCorner = x * pixelWidth + x;\n                } else if (x === canvasSize - 1 && y === canvasSize - 1) {\n                    lrCorner = (x * pixelWidth + x) + pixelWidth;\n                }\n            }\n        }\n\n        return [ulCorner, lrCorner, pixelWidth];\n    }\n\n    // When canvas is loaded\n    useEffect(() => {\n        // receive socketio canvas_state\n        socket.on('canvas_state', (receivedData) => {\n            if (mode === 0) {\n                clearTimeout(responseTimeout);\n\n                // obtain data and decode it from base 64 string:\n                const encoded = receivedData.data;\n                // decode to bytes\n                const decoded = Uint8Array.from(atob(encoded), (c) => c.charCodeAt(0));\n\n                console.log(`set data to ${decoded}`);\n\n                setData(decoded);\n                setCanvasSize(receivedData.size);\n\n                setMode(2);\n                props.setCanvasLoadState(true);\n            }\n        });\n\n        if (mode === 2) {\n            // receive socketio canvas_update\n            socket.on('canvas_update', (receivedData) => {\n                // update data:\n                const dataCopy = data;\n                dataCopy[receivedData.x + (receivedData.y * canvasSize)] = receivedData.color;\n\n                console.log(`placed pixel at ${receivedData.x}, ${receivedData.y}`);\n\n                setData(data);\n                redraw();\n            });\n\n            canvasRef = document.getElementById('canvas');\n            canvasCtx.current = canvasRef.getContext('2d');\n            // eslint-disable-next-line no-use-before-define\n            initializeCanvasManipulation();\n        }\n    }, [mode]);\n\n    // send socketio request on load:\n    useEffect(() => {\n        if (mode === 0 && !hasRequested) {\n            setTimeout(() => {\n                socket.emit('canvas_request', {});\n                setHasRequested(true);\n                console.log('emitted canvas request');\n                responseTimeout = setTimeout(() => {\n                    setMode(1);\n                }, 5000);\n            }, 1000);\n        }\n    });\n\n    // generate random board for testing\n    function test() {\n        const TESTING_SIZE = 50;\n\n        setCanvasSize(TESTING_SIZE);\n\n        const a = new Uint8ClampedArray(TESTING_SIZE * TESTING_SIZE);\n        for (let x = 0; x < TESTING_SIZE * TESTING_SIZE; x += 1) {\n            // eslint-disable-next-line no-bitwise\n            a[x] = (Math.random() * (13 - 0 + 1)) << 0; // generate random int between 0 & 13\n        }\n\n        setData(a);\n        setMode(2);\n        props.setCanvasLoadState(true);\n    }\n\n    if (mode === 0) { // CANVAS INFO NOT YET LOADED\n        return (\n            <div id=\"canvas\" className=\"canvas_placeholder\" ref={canvasPlaceholderRef}>\n                <div id=\"placeholder_content\">\n                    <img src={loadingCircle} alt=\"\" />\n                </div>\n            </div>\n        );\n    } if (mode === 1) { // TIMEOUT OBTAINING CANVAS DATA FROM SERVER\n        return (\n            <div id=\"canvas\" className=\"canvas_placeholder\">\n                <div>\n                    <div style={{ padding: 40 }}>\n                        <h3>Unable to Load Canvas :(</h3>\n                        <p>\n                            <i>\n                                We were unable to get canvas data from our servers.\n                                Try reloading the page or trying again later.\n                            </i>\n                        </p>\n                        <button type=\"button\" onClick={test}>\n                            Continue anyway\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    } if (mode === 2) { // SUCESSFULLY LOADED CANVAS DATA FROM SERVER\n        return (\n            <canvas id=\"canvas\" />\n        );\n    }\n\n    // use current mouse position on canvas to determine which pixel is being hovered over\n    function higlightSelected(ctx, x, y, canvasRenderWidth) {\n        const pt = ctx.transformedPoint(x, y);\n\n        const newSel = [\n            // eslint-disable-next-line no-mixed-operators\n            Math.trunc((pt.x) / (canvasRenderWidth) * canvasSize),\n            // eslint-disable-next-line no-mixed-operators\n            Math.trunc((pt.y) / (canvasRenderWidth) * canvasSize)];\n\n        if (props.selectedColor.current === -1 || newSel[0] <= -2 || newSel[1] <= -2\n            || newSel[0] > canvasSize - 1 || newSel[1] > canvasSize - 1) {\n            canvasRef.style.cursor = 'default';\n            setSelectedPixel([-1, -1]);\n            return false;\n        }\n        canvasRef.style.cursor = 'none';\n\n        if (newSel[0] === selectedPixel[0] && newSel[1] === selectedPixel[1]) {\n            return false;\n        }\n        setSelectedPixel(newSel);\n        return true;\n    }\n\n    function initializeCanvasManipulation() {\n    // IMPLEMENT CANVAS PANNING/ZOOMING     http://phrogz.net/tmp/canvas_zoom_to_cursor.html\n        const canvas = canvasRef;\n\n        // automatically resize canvas\n        canvas.width = window.innerWidth - 240;\n        canvas.height = window.innerHeight;\n\n        canvasWidth = window.innerWidth - 240;\n        canvasHeight = window.innerHeight;\n\n        window.onresize = () => {\n            canvas.width = window.innerWidth - 240;\n            canvas.height = window.innerHeight;\n\n            canvasWidth = canvas.width;\n            canvasHeight = canvas.height;\n\n            trackTransforms(canvasCtx.current);\n            canvasCtx.current.translate(canvas.width / 4, 0);\n            redraw();\n        };\n\n        trackTransforms(canvasCtx.current);\n        canvasCtx.current.translate(canvas.width / 4, 0);\n\n        const [upperLeftCornerCoords, lowerRightCornerCoords, pixelWidth] = firstRedraw();\n        const canvasRenderWidth = lowerRightCornerCoords - upperLeftCornerCoords;\n\n        let lastX = canvas.width / 2; let\n            lastY = canvas.height / 2;\n        let dragStart; let dragged;\n\n        window.addEventListener('mouseup', (evt) => {\n            if (dragStart) {\n                dragStart = false;\n            }\n            if (!dragged) {\n                placePixel();\n            }\n        }, false);\n        canvas.addEventListener('mousedown', (evt) => {\n            // eslint-disable-next-line no-multi-assign\n            document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';\n            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);\n            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);\n            dragStart = canvasCtx.current.transformedPoint(lastX, lastY);\n            dragged = false;\n        }, false);\n        canvas.addEventListener('mousemove', (evt) => {\n            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);\n            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);\n            dragged = true;\n            if (dragStart) {\n                const pt = canvasCtx.current.transformedPoint(lastX, lastY);\n                canvasCtx.current.translate(pt.x - dragStart.x, pt.y - dragStart.y);\n                redraw();\n            } else {\n                // highlight pixel:\n                // eslint-disable-next-line no-lonely-if\n                if (higlightSelected(canvasCtx.current, evt.offsetX, evt.offsetY,\n                    canvasRenderWidth)) {\n                    redraw();\n                }\n            }\n        }, false);\n        canvas.addEventListener('mouseup', (evt) => {\n            dragStart = null;\n            // if (!dragged) zoom(evt.shiftKey ? -1 : 1);\n        }, false);\n        canvas.addEventListener('mouseleave', (evt) => {\n            setSelectedPixel([-1, -1]);\n            redraw();\n        });\n\n        const scaleFactor = 1.05;\n        // eslint-disable-next-line vars-on-top\n        const zoom = function (clicks) {\n            const pt = canvasCtx.current.transformedPoint(lastX, lastY);\n            canvasCtx.current.translate(pt.x, pt.y);\n            // eslint-disable-next-line no-restricted-properties\n            const factor = Math.pow(scaleFactor, clicks);\n            canvasCtx.current.scale(factor, factor);\n            canvasCtx.current.translate(-pt.x, -pt.y);\n            redraw();\n        };\n\n        const handleScroll = function (evt) {\n            // eslint-disable-next-line no-nested-ternary\n            const delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;\n            if (delta) zoom(delta);\n            return evt.preventDefault() && false;\n        };\n        canvas.addEventListener('DOMMouseScroll', handleScroll, false);\n        canvas.addEventListener('mousewheel', handleScroll, false);\n    }\n\n    // Adds ctx.getTransform() - returns an SVGMatrix\n    // Adds ctx.transformedPoint(x,y) - returns an SVGPoint\n    function trackTransforms(ctx) {\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        let xform = svg.createSVGMatrix();\n        ctx.getTransform = function () { return xform; };\n\n        const savedTransforms = [];\n        const { save } = ctx;\n        ctx.save = function () {\n            savedTransforms.push(xform.translate(0, 0));\n            return save.call(ctx);\n        };\n        const { restore } = ctx;\n        ctx.restore = function () {\n            xform = savedTransforms.pop();\n            return restore.call(ctx);\n        };\n\n        const { scale } = ctx;\n        ctx.scale = function (sx, sy) {\n            xform = xform.scaleNonUniform(sx, sy);\n            return scale.call(ctx, sx, sy);\n        };\n        const { rotate } = ctx;\n        ctx.rotate = function (radians) {\n            // eslint-disable-next-line no-mixed-operators\n            xform = xform.rotate(radians * 180 / Math.PI);\n            return rotate.call(ctx, radians);\n        };\n        const { translate } = ctx;\n        ctx.translate = function (dx, dy) {\n            xform = xform.translate(dx, dy);\n            return translate.call(ctx, dx, dy);\n        };\n        const { transform } = ctx;\n        ctx.transform = function (a, b, c, d, e, f) {\n            const m2 = svg.createSVGMatrix();\n            m2.a = a; m2.b = b; m2.c = c; m2.d = d; m2.e = e; m2.f = f;\n            xform = xform.multiply(m2);\n            return transform.call(ctx, a, b, c, d, e, f);\n        };\n        const { setTransform } = ctx;\n        ctx.setTransform = function (a, b, c, d, e, f) {\n            xform.a = a;\n            xform.b = b;\n            xform.c = c;\n            xform.d = d;\n            xform.e = e;\n            xform.f = f;\n            return setTransform.call(ctx, a, b, c, d, e, f);\n        };\n        const pt = svg.createSVGPoint();\n        ctx.transformedPoint = function (x, y) {\n            pt.x = x; pt.y = y;\n            return pt.matrixTransform(xform.inverse());\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}