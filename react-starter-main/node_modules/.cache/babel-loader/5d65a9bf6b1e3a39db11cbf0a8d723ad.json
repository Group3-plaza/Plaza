{"ast":null,"code":"var _jsxFileName = \"/Users/coltonjohnson/Desktop/CS490/Plaza/react-starter-main/src/Canvas.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable func-names */\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable no-unused-vars */\n// Canvas that will display current pixel data.\nimport './Canvas.css';\nimport React, { useState, useEffect, useRef } from 'react'; // eslint-disable-next-line import/no-cycle\n\nimport { socket } from './App';\nimport loadingCircle from './graphics/loading_circle.gif'; // eslint-disable-next-line import/prefer-default-export\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Canvas(props) {\n  _s();\n\n  // STATES\n  const [mode, setMode] = useState(0); // current mode of canvas:\n  //  0 - Obtaining canvas data...\n  //  1 - Timeout obtaining canvas data...\n  //  2 - Success loading\n\n  const [enabled, setEnabled] = useState(false); // set this to True to be able to click on canvas\n\n  const [data, setData] = useState([]); // contains pixel data\n  // contains width (width=height) of canvas displayed pixels\n\n  const [canvasSize, setCanvasSize] = useState(0); // NOTE: This is different from HTML canvas size\n\n  let canvasRef;\n  const canvasPlaceholderRef = useRef(null);\n  let responseTimeout;\n  let height;\n  let width; // determine size\n\n  window.onload = () => {\n    width = window.innerWidth - 360;\n    height = window.innerHeight - 40;\n  }; // receive socketio canvas_state\n\n\n  socket.on('canvas_state', receivedData => {\n    if (mode === 0) {\n      clearTimeout(responseTimeout); // obtain data and decode it from base 64 string:\n\n      const encoded = receivedData.data; // decode to bytes\n\n      const decoded = Uint8Array.from(atob(encoded), c => c.charCodeAt(0));\n      console.log(`set data to ${decoded}`);\n      setData(decoded);\n      setCanvasSize(receivedData.size);\n      setMode(2);\n      props.setCanvasLoadState(true);\n    }\n  }); // convert color index to rgb\n\n  function toColor(x) {\n    if (x === 0) {\n      return [255, 0, 0];\n    }\n\n    if (x === 1) {\n      return [255, 69, 0];\n    }\n\n    if (x === 2) {\n      return [255, 165, 0];\n    }\n\n    if (x === 3) {\n      return [255, 174, 66];\n    }\n\n    if (x === 4) {\n      return [255, 255, 0];\n    }\n\n    if (x === 5) {\n      return [154, 205, 50];\n    }\n\n    if (x === 6) {\n      return [0, 255, 0];\n    }\n\n    if (x === 7) {\n      return [13, 152, 186];\n    }\n\n    if (x === 8) {\n      return [0, 0, 255];\n    }\n\n    if (x === 9) {\n      return [138, 43, 226];\n    }\n\n    if (x === 10) {\n      return [238, 130, 238];\n    }\n\n    if (x === 11) {\n      return [199, 21, 133];\n    }\n\n    if (x === 12) {\n      return [255, 255, 255];\n    }\n\n    if (x === 13) {\n      return [0, 0, 0];\n    }\n\n    return [0, 0, 0]; // index out of bounds\n  } // uses 'data' state to create pixels\n\n\n  function redraw() {\n    const context = canvasRef.getContext('2d');\n    let i = 0;\n    const canvasWidth = canvasRef.width;\n    const canvasHeight = canvasRef.height;\n    const pixelWidth = canvasHeight / canvasSize;\n    const pixelHeight = canvasHeight / canvasSize;\n    const p1 = context.transformedPoint(0, 0);\n    const p2 = context.transformedPoint(canvasWidth, canvasHeight);\n    context.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n\n    for (let x = 0; x < canvasSize; x += 1) {\n      for (let y = 0; y < canvasSize; y += 1) {\n        const color = toColor(data[i]);\n        i += 1;\n        context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n        context.fillRect(x * pixelWidth + x, y * pixelHeight + y, pixelWidth, pixelHeight);\n      }\n    }\n  } // When canvas is loaded\n\n\n  useEffect(() => {\n    if (mode === 2) {\n      canvasRef = document.getElementById('canvas'); // eslint-disable-next-line no-use-before-define\n\n      initializeCanvasManipulation();\n    }\n  }, [mode]); // send socketio request on load:\n\n  useEffect(() => {\n    if (mode === 0) {\n      setTimeout(() => {\n        socket.emit('canvas_request', {});\n        responseTimeout = setTimeout(() => {\n          setMode(1);\n        }, 5000);\n      }, 1000);\n    }\n  }); // testing function\n\n  function test() {\n    const TESTING_SIZE = 50;\n    setCanvasSize(TESTING_SIZE);\n    const a = new Uint8ClampedArray(TESTING_SIZE * TESTING_SIZE);\n\n    for (let x = 0; x < TESTING_SIZE * TESTING_SIZE; x += 1) {\n      // eslint-disable-next-line no-bitwise\n      a[x] = Math.random() * (13 - 0 + 1) << 0; // generate random int between 0 & 13\n    }\n\n    setData(a);\n    setMode(2);\n    props.setCanvasLoadState(true);\n  }\n\n  if (mode === 0) {\n    // CANVAS INFO NOT YET LOADED\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"canvas\",\n      className: \"canvas_placeholder\",\n      ref: canvasPlaceholderRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"placeholder_content\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadingCircle,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (mode === 1) {\n    // TIMEOUT OBTAINING CANVAS DATA FROM SERVER\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"canvas\",\n      className: \"canvas_placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: 40\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Unable to Load Canvas :(\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"We were unable to get canvas data from our servers. Try reloading the page or trying again later.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: test,\n            children: \"Continue anyway\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (mode === 2) {\n    // SUCESSFULLY LOADED CANVAS DATA FROM SERVER\n    // eslint-disable-next-line no-inner-declarations\n    function onCanvasClick() {// TODO: implement something here...\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\",\n      onClick: onCanvasClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this);\n  }\n\n  function initializeCanvasManipulation() {\n    // IMPLEMENT CANVAS PANNING/ZOOMING     http://phrogz.net/tmp/canvas_zoom_to_cursor.html\n    const canvas = canvasRef;\n    const ctx = canvas.getContext('2d'); // automatically resize canvas\n\n    canvas.width = window.innerWidth - 380;\n    canvas.height = window.innerHeight - 40;\n\n    window.onresize = () => {\n      canvas.width = window.innerWidth - 310;\n      canvas.height = window.innerHeight - 40;\n      trackTransforms(ctx);\n      ctx.translate(canvas.width / 4, 0);\n      redraw();\n    };\n\n    trackTransforms(ctx);\n    ctx.translate(canvas.width / 4, 0);\n    redraw();\n    let lastX = canvas.width / 2;\n    let lastY = canvas.height / 2;\n    let dragStart;\n    let dragged;\n    canvas.addEventListener('mousedown', evt => {\n      // eslint-disable-next-line no-multi-assign\n      document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';\n      lastX = evt.offsetX || evt.pageX - canvas.offsetLeft;\n      lastY = evt.offsetY || evt.pageY - canvas.offsetTop;\n      dragStart = ctx.transformedPoint(lastX, lastY);\n      dragged = false;\n    }, false);\n    canvas.addEventListener('mousemove', evt => {\n      lastX = evt.offsetX || evt.pageX - canvas.offsetLeft;\n      lastY = evt.offsetY || evt.pageY - canvas.offsetTop;\n      dragged = true;\n\n      if (dragStart) {\n        const pt = ctx.transformedPoint(lastX, lastY);\n        ctx.translate(pt.x - dragStart.x, pt.y - dragStart.y);\n        redraw();\n      }\n    }, false);\n    canvas.addEventListener('mouseup', evt => {\n      dragStart = null;\n      if (!dragged) zoom(evt.shiftKey ? -1 : 1);\n    }, false);\n    const scaleFactor = 1.05; // eslint-disable-next-line vars-on-top\n\n    let zoom = function (clicks) {\n      const pt = ctx.transformedPoint(lastX, lastY);\n      ctx.translate(pt.x, pt.y); // eslint-disable-next-line no-restricted-properties\n\n      const factor = Math.pow(scaleFactor, clicks);\n      ctx.scale(factor, factor);\n      ctx.translate(-pt.x, -pt.y);\n      redraw();\n    };\n\n    const handleScroll = function (evt) {\n      // eslint-disable-next-line no-nested-ternary\n      const delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;\n      if (delta) zoom(delta);\n      return evt.preventDefault() && false;\n    };\n\n    canvas.addEventListener('DOMMouseScroll', handleScroll, false);\n    canvas.addEventListener('mousewheel', handleScroll, false);\n  } // Adds ctx.getTransform() - returns an SVGMatrix\n  // Adds ctx.transformedPoint(x,y) - returns an SVGPoint\n\n\n  function trackTransforms(ctx) {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    let xform = svg.createSVGMatrix();\n\n    ctx.getTransform = function () {\n      return xform;\n    };\n\n    const savedTransforms = [];\n    const {\n      save\n    } = ctx;\n\n    ctx.save = function () {\n      savedTransforms.push(xform.translate(0, 0));\n      return save.call(ctx);\n    };\n\n    const {\n      restore\n    } = ctx;\n\n    ctx.restore = function () {\n      xform = savedTransforms.pop();\n      return restore.call(ctx);\n    };\n\n    const {\n      scale\n    } = ctx;\n\n    ctx.scale = function (sx, sy) {\n      xform = xform.scaleNonUniform(sx, sy);\n      return scale.call(ctx, sx, sy);\n    };\n\n    const {\n      rotate\n    } = ctx;\n\n    ctx.rotate = function (radians) {\n      // eslint-disable-next-line no-mixed-operators\n      xform = xform.rotate(radians * 180 / Math.PI);\n      return rotate.call(ctx, radians);\n    };\n\n    const {\n      translate\n    } = ctx;\n\n    ctx.translate = function (dx, dy) {\n      xform = xform.translate(dx, dy);\n      return translate.call(ctx, dx, dy);\n    };\n\n    const {\n      transform\n    } = ctx;\n\n    ctx.transform = function (a, b, c, d, e, f) {\n      const m2 = svg.createSVGMatrix();\n      m2.a = a;\n      m2.b = b;\n      m2.c = c;\n      m2.d = d;\n      m2.e = e;\n      m2.f = f;\n      xform = xform.multiply(m2);\n      return transform.call(ctx, a, b, c, d, e, f);\n    };\n\n    const {\n      setTransform\n    } = ctx;\n\n    ctx.setTransform = function (a, b, c, d, e, f) {\n      xform.a = a;\n      xform.b = b;\n      xform.c = c;\n      xform.d = d;\n      xform.e = e;\n      xform.f = f;\n      return setTransform.call(ctx, a, b, c, d, e, f);\n    };\n\n    const pt = svg.createSVGPoint();\n\n    ctx.transformedPoint = function (x, y) {\n      pt.x = x;\n      pt.y = y;\n      return pt.matrixTransform(xform.inverse());\n    };\n  }\n}\n\n_s(Canvas, \"5ofnYbeC+WG42jjcBfaJZrkyfy0=\");\n\n_c = Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/coltonjohnson/Desktop/CS490/Plaza/react-starter-main/src/Canvas.js"],"names":["React","useState","useEffect","useRef","socket","loadingCircle","Canvas","props","mode","setMode","enabled","setEnabled","data","setData","canvasSize","setCanvasSize","canvasRef","canvasPlaceholderRef","responseTimeout","height","width","window","onload","innerWidth","innerHeight","on","receivedData","clearTimeout","encoded","decoded","Uint8Array","from","atob","c","charCodeAt","console","log","size","setCanvasLoadState","toColor","x","redraw","context","getContext","i","canvasWidth","canvasHeight","pixelWidth","pixelHeight","p1","transformedPoint","p2","clearRect","y","color","fillStyle","fillRect","document","getElementById","initializeCanvasManipulation","setTimeout","emit","test","TESTING_SIZE","a","Uint8ClampedArray","Math","random","padding","onCanvasClick","canvas","ctx","onresize","trackTransforms","translate","lastX","lastY","dragStart","dragged","addEventListener","evt","body","style","mozUserSelect","webkitUserSelect","userSelect","offsetX","pageX","offsetLeft","offsetY","pageY","offsetTop","pt","zoom","shiftKey","scaleFactor","clicks","factor","pow","scale","handleScroll","delta","wheelDelta","detail","preventDefault","svg","createElementNS","xform","createSVGMatrix","getTransform","savedTransforms","save","push","call","restore","pop","sx","sy","scaleNonUniform","rotate","radians","PI","dx","dy","transform","b","d","e","f","m2","multiply","setTransform","createSVGPoint","matrixTransform","inverse"],"mappings":"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","sourcesContent":["/* eslint-disable func-names */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable no-unused-vars */\n\n// Canvas that will display current pixel data.\nimport './Canvas.css';\nimport React, { useState, useEffect, useRef } from 'react';\n// eslint-disable-next-line import/no-cycle\nimport { socket } from './App';\nimport loadingCircle from './graphics/loading_circle.gif';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function Canvas(props) {\n    // STATES\n    const [mode, setMode] = useState(0); // current mode of canvas:\n    //  0 - Obtaining canvas data...\n    //  1 - Timeout obtaining canvas data...\n    //  2 - Success loading\n\n    const [enabled, setEnabled] = useState(false); // set this to True to be able to click on canvas\n    const [data, setData] = useState([]); // contains pixel data\n    // contains width (width=height) of canvas displayed pixels\n    const [canvasSize, setCanvasSize] = useState(0);\n    // NOTE: This is different from HTML canvas size\n\n    let canvasRef;\n    const canvasPlaceholderRef = useRef(null);\n    let responseTimeout;\n    let height;\n    let width;\n\n    // determine size\n    window.onload = () => {\n        width = window.innerWidth - 360;\n        height = window.innerHeight - 40;\n    };\n\n    // receive socketio canvas_state\n    socket.on('canvas_state', (receivedData) => {\n        if (mode === 0) {\n            clearTimeout(responseTimeout);\n\n            // obtain data and decode it from base 64 string:\n            const encoded = receivedData.data;\n            // decode to bytes\n            const decoded = Uint8Array.from(atob(encoded), (c) => c.charCodeAt(0));\n\n            console.log(`set data to ${decoded}`);\n\n            setData(decoded);\n            setCanvasSize(receivedData.size);\n\n            setMode(2);\n            props.setCanvasLoadState(true);\n        }\n    });\n\n    // convert color index to rgb\n    function toColor(x) {\n        if (x === 0) {\n            return [255, 0, 0];\n        } if (x === 1) {\n            return [255, 69, 0];\n        } if (x === 2) {\n            return [255, 165, 0];\n        } if (x === 3) {\n            return [255, 174, 66];\n        } if (x === 4) {\n            return [255, 255, 0];\n        } if (x === 5) {\n            return [154, 205, 50];\n        } if (x === 6) {\n            return [0, 255, 0];\n        } if (x === 7) {\n            return [13, 152, 186];\n        } if (x === 8) {\n            return [0, 0, 255];\n        } if (x === 9) {\n            return [138, 43, 226];\n        } if (x === 10) {\n            return [238, 130, 238];\n        } if (x === 11) {\n            return [199, 21, 133];\n        } if (x === 12) {\n            return [255, 255, 255];\n        } if (x === 13) {\n            return [0, 0, 0];\n        }\n        return [0, 0, 0]; // index out of bounds\n    }\n    // uses 'data' state to create pixels\n    function redraw() {\n        const context = canvasRef.getContext('2d');\n        let i = 0;\n\n        const canvasWidth = canvasRef.width;\n        const canvasHeight = canvasRef.height;\n\n        const pixelWidth = (canvasHeight / canvasSize);\n        const pixelHeight = (canvasHeight / canvasSize);\n\n        const p1 = context.transformedPoint(0, 0);\n        const p2 = context.transformedPoint(canvasWidth, canvasHeight);\n        context.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n\n        for (let x = 0; x < canvasSize; x += 1) {\n            for (let y = 0; y < canvasSize; y += 1) {\n                const color = toColor(data[i]);\n                i += 1;\n                context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n                context.fillRect(x * pixelWidth + x, y * pixelHeight + y, pixelWidth, pixelHeight);\n            }\n        }\n    }\n\n    // When canvas is loaded\n    useEffect(() => {\n        if (mode === 2) {\n            canvasRef = document.getElementById('canvas');\n            // eslint-disable-next-line no-use-before-define\n            initializeCanvasManipulation();\n        }\n    }, [mode]);\n\n    // send socketio request on load:\n    useEffect(() => {\n        if (mode === 0) {\n            setTimeout(() => {\n                socket.emit('canvas_request', {});\n                responseTimeout = setTimeout(() => {\n                    setMode(1);\n                }, 5000);\n            }, 1000);\n        }\n    });\n\n    // testing function\n    function test() {\n        const TESTING_SIZE = 50;\n\n        setCanvasSize(TESTING_SIZE);\n\n        const a = new Uint8ClampedArray(TESTING_SIZE * TESTING_SIZE);\n        for (let x = 0; x < TESTING_SIZE * TESTING_SIZE; x += 1) {\n            // eslint-disable-next-line no-bitwise\n            a[x] = (Math.random() * (13 - 0 + 1)) << 0; // generate random int between 0 & 13\n        }\n\n        setData(a);\n        setMode(2);\n        props.setCanvasLoadState(true);\n    }\n\n    if (mode === 0) { // CANVAS INFO NOT YET LOADED\n        return (\n            <div id=\"canvas\" className=\"canvas_placeholder\" ref={canvasPlaceholderRef}>\n                <div id=\"placeholder_content\">\n                    <img src={loadingCircle} alt=\"\" />\n                </div>\n            </div>\n        );\n    } if (mode === 1) { // TIMEOUT OBTAINING CANVAS DATA FROM SERVER\n        return (\n            <div id=\"canvas\" className=\"canvas_placeholder\">\n                <div>\n                    <div style={{ padding: 40 }}>\n                        <h3>Unable to Load Canvas :(</h3>\n                        <p>\n                            <i>\n                                We were unable to get canvas data from our servers.\n                                Try reloading the page or trying again later.\n                            </i>\n                        </p>\n                        <button type=\"button\" onClick={test}>\n                            Continue anyway\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    } if (mode === 2) { // SUCESSFULLY LOADED CANVAS DATA FROM SERVER\n    // eslint-disable-next-line no-inner-declarations\n        function onCanvasClick() {\n            // TODO: implement something here...\n        }\n\n        return (\n            <canvas\n                id=\"canvas\"\n                onClick={onCanvasClick}\n            />\n        );\n    }\n\n    function initializeCanvasManipulation() {\n    // IMPLEMENT CANVAS PANNING/ZOOMING     http://phrogz.net/tmp/canvas_zoom_to_cursor.html\n        const canvas = canvasRef;\n        const ctx = canvas.getContext('2d');\n\n        // automatically resize canvas\n        canvas.width = window.innerWidth - 380;\n        canvas.height = window.innerHeight - 40;\n\n        window.onresize = () => {\n            canvas.width = window.innerWidth - 310;\n            canvas.height = window.innerHeight - 40;\n\n            trackTransforms(ctx);\n            ctx.translate(canvas.width / 4, 0);\n            redraw();\n        };\n\n        trackTransforms(ctx);\n        ctx.translate(canvas.width / 4, 0);\n\n        redraw();\n\n        let lastX = canvas.width / 2; let\n            lastY = canvas.height / 2;\n        let dragStart; let dragged;\n        canvas.addEventListener('mousedown', (evt) => {\n            // eslint-disable-next-line no-multi-assign\n            document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';\n            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);\n            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);\n            dragStart = ctx.transformedPoint(lastX, lastY);\n            dragged = false;\n        }, false);\n        canvas.addEventListener('mousemove', (evt) => {\n            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);\n            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);\n            dragged = true;\n            if (dragStart) {\n                const pt = ctx.transformedPoint(lastX, lastY);\n                ctx.translate(pt.x - dragStart.x, pt.y - dragStart.y);\n                redraw();\n            }\n        }, false);\n        canvas.addEventListener('mouseup', (evt) => {\n            dragStart = null;\n            if (!dragged) zoom(evt.shiftKey ? -1 : 1);\n        }, false);\n\n        const scaleFactor = 1.05;\n        // eslint-disable-next-line vars-on-top\n        let zoom = function (clicks) {\n            const pt = ctx.transformedPoint(lastX, lastY);\n            ctx.translate(pt.x, pt.y);\n            // eslint-disable-next-line no-restricted-properties\n            const factor = Math.pow(scaleFactor, clicks);\n            ctx.scale(factor, factor);\n            ctx.translate(-pt.x, -pt.y);\n            redraw();\n        };\n\n        const handleScroll = function (evt) {\n            // eslint-disable-next-line no-nested-ternary\n            const delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;\n            if (delta) zoom(delta);\n            return evt.preventDefault() && false;\n        };\n        canvas.addEventListener('DOMMouseScroll', handleScroll, false);\n        canvas.addEventListener('mousewheel', handleScroll, false);\n    }\n\n    // Adds ctx.getTransform() - returns an SVGMatrix\n    // Adds ctx.transformedPoint(x,y) - returns an SVGPoint\n    function trackTransforms(ctx) {\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        let xform = svg.createSVGMatrix();\n        ctx.getTransform = function () { return xform; };\n\n        const savedTransforms = [];\n        const { save } = ctx;\n        ctx.save = function () {\n            savedTransforms.push(xform.translate(0, 0));\n            return save.call(ctx);\n        };\n        const { restore } = ctx;\n        ctx.restore = function () {\n            xform = savedTransforms.pop();\n            return restore.call(ctx);\n        };\n\n        const { scale } = ctx;\n        ctx.scale = function (sx, sy) {\n            xform = xform.scaleNonUniform(sx, sy);\n            return scale.call(ctx, sx, sy);\n        };\n        const { rotate } = ctx;\n        ctx.rotate = function (radians) {\n            // eslint-disable-next-line no-mixed-operators\n            xform = xform.rotate(radians * 180 / Math.PI);\n            return rotate.call(ctx, radians);\n        };\n        const { translate } = ctx;\n        ctx.translate = function (dx, dy) {\n            xform = xform.translate(dx, dy);\n            return translate.call(ctx, dx, dy);\n        };\n        const { transform } = ctx;\n        ctx.transform = function (a, b, c, d, e, f) {\n            const m2 = svg.createSVGMatrix();\n            m2.a = a; m2.b = b; m2.c = c; m2.d = d; m2.e = e; m2.f = f;\n            xform = xform.multiply(m2);\n            return transform.call(ctx, a, b, c, d, e, f);\n        };\n        const { setTransform } = ctx;\n        ctx.setTransform = function (a, b, c, d, e, f) {\n            xform.a = a;\n            xform.b = b;\n            xform.c = c;\n            xform.d = d;\n            xform.e = e;\n            xform.f = f;\n            return setTransform.call(ctx, a, b, c, d, e, f);\n        };\n        const pt = svg.createSVGPoint();\n        ctx.transformedPoint = function (x, y) {\n            pt.x = x; pt.y = y;\n            return pt.matrixTransform(xform.inverse());\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}