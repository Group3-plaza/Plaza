{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/Plaza/react-starter-main/src/Canvas.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable func-names */\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable react/jsx-filename-extension */\n\n/* eslint-disable no-unused-vars */\n// Canvas that will display current pixel data.\nimport './Canvas.css';\nimport React, { useState, useEffect } from 'react'; // eslint-disable-next-line import/no-cycle\n\nimport { socket } from './App';\nimport loadingCircle from './graphics/loading_circle.gif'; // eslint-disable-next-line import/prefer-default-export\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Canvas(props) {\n  _s();\n\n  // STATES\n  const [mode, setMode] = useState(0); // current mode of canvas:\n  //  0 - Obtaining canvas data...\n  //  1 - Timeout obtaining canvas data...\n  //  2 - Success loading\n\n  const [enabled, setEnabled] = useState(false); // set this to True to be able to click on canvas\n\n  const [data, setData] = useState([]); // contains pixel data\n  // contains width (width=height) of canvas displayed pixels\n\n  const [canvasSize, setCanvasSize] = useState(0); // NOTE: This is different from HTML canvas size\n\n  let canvasRef;\n  let responseTimeout; // receive socketio canvas_state\n\n  socket.on('canvas_state', receivedData => {\n    if (mode === 0) {\n      clearTimeout(responseTimeout); // obtain data and decode it from base 64 string:\n\n      const encoded = receivedData.data;\n      const decoded = Uint8Array.from(atob(encoded), c => c.charCodeAt(0)); // decode to bytes\n\n      console.log(`set data to ${decoded}`);\n      setData(decoded);\n      setCanvasSize(receivedData.size);\n      setMode(2);\n    }\n  }); // convert color index to rgb\n\n  function toColor(x) {\n    if (x === 0) {\n      return [255, 0, 0];\n    }\n\n    if (x === 1) {\n      return [255, 69, 0];\n    }\n\n    if (x === 2) {\n      return [255, 165, 0];\n    }\n\n    if (x === 3) {\n      return [255, 174, 66];\n    }\n\n    if (x === 4) {\n      return [255, 255, 0];\n    }\n\n    if (x === 5) {\n      return [154, 205, 50];\n    }\n\n    if (x === 6) {\n      return [0, 255, 0];\n    }\n\n    if (x === 7) {\n      return [13, 152, 186];\n    }\n\n    if (x === 8) {\n      return [0, 0, 255];\n    }\n\n    if (x === 9) {\n      return [138, 43, 226];\n    }\n\n    if (x === 10) {\n      return [238, 130, 238];\n    }\n\n    if (x === 11) {\n      return [199, 21, 133];\n    }\n\n    if (x === 12) {\n      return [255, 255, 255];\n    }\n\n    if (x === 13) {\n      return [0, 0, 0];\n    }\n\n    return [0, 0, 0]; // index out of bounds\n  } // uses 'data' state to create pixels\n\n\n  function redraw() {\n    const context = canvasRef.getContext('2d');\n    let i = 0;\n    const canvasWidth = canvasRef.width;\n    const canvasHeight = canvasRef.height;\n    const pixelWidth = canvasHeight / canvasSize;\n    const pixelHeight = canvasHeight / canvasSize;\n    const p1 = context.transformedPoint(0, 0);\n    const p2 = context.transformedPoint(canvasWidth, canvasHeight);\n    context.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n\n    for (let x = 0; x < canvasSize; x += 1) {\n      for (let y = 0; y < canvasSize; y += 1) {\n        const color = toColor(data[i]);\n        i += 1;\n        context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n        context.fillRect(x * pixelWidth + x, y * pixelHeight + y, pixelWidth, pixelHeight);\n      }\n    }\n  } // When canvas is loaded\n\n\n  useEffect(() => {\n    if (mode === 2) {\n      canvasRef = document.getElementById('canvas'); // eslint-disable-next-line no-use-before-define\n\n      initializeCanvasManipulation();\n    }\n  }, [mode]); // send socketio request on load:\n\n  useEffect(() => {\n    if (mode === 0) {\n      setTimeout(() => {\n        socket.emit('canvas_request', {});\n        responseTimeout = setTimeout(() => {\n          setMode(1);\n        }, 5000);\n      }, 1800);\n    }\n  }); // testing function\n\n  function test() {\n    const TESTING_SIZE = 50;\n    setCanvasSize(TESTING_SIZE);\n    const a = new Uint8ClampedArray(TESTING_SIZE * TESTING_SIZE);\n\n    for (let x = 0; x < TESTING_SIZE * TESTING_SIZE; x += 1) {\n      // eslint-disable-next-line no-bitwise\n      a[x] = Math.random() * (13 - 0 + 1) << 0; // generate random int between 0 & 13\n    }\n\n    setData(a);\n    setMode(2);\n  }\n\n  if (mode === 0) {\n    // CANVAS INFO NOT YET LOADED\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"canvas\",\n      className: \"canvas_placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadingCircle,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (mode === 1) {\n    // TIMEOUT OBTAINING CANVAS DATA FROM SERVER\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"canvas\",\n      className: \"canvas_placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: 40\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Unable to Load Canvas :(\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"We were unable to get canvas data from our servers. Try reloading the page or trying again later.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: test,\n            children: \"Continue anyway\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (mode === 2) {\n    // SUCESSFULLY LOADED CANVAS DATA FROM SERVER\n    // eslint-disable-next-line no-inner-declarations\n    function onCanvasClick() {// TODO: implement something here...\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\",\n      onClick: onCanvasClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n\n  function initializeCanvasManipulation() {\n    // IMPLEMENT CANVAS PANNING/ZOOMING     http://phrogz.net/tmp/canvas_zoom_to_cursor.html\n    const canvas = canvasRef;\n    const ctx = canvas.getContext('2d'); // automatically resize canvas\n\n    canvas.width = window.innerWidth - 50;\n    canvas.height = window.innerHeight - 80;\n\n    window.onresize = () => {\n      canvas.width = window.innerWidth - 50;\n      canvas.height = window.innerHeight - 80;\n      trackTransforms(ctx);\n      ctx.translate(canvas.width / 4, 0);\n      redraw();\n    };\n\n    trackTransforms(ctx);\n    ctx.translate(canvas.width / 4, 0);\n    redraw();\n    let lastX = canvas.width / 2;\n    let lastY = canvas.height / 2;\n    let dragStart;\n    let dragged;\n    canvas.addEventListener('mousedown', evt => {\n      // eslint-disable-next-line no-multi-assign\n      document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';\n      lastX = evt.offsetX || evt.pageX - canvas.offsetLeft;\n      lastY = evt.offsetY || evt.pageY - canvas.offsetTop;\n      dragStart = ctx.transformedPoint(lastX, lastY);\n      dragged = false;\n    }, false);\n    canvas.addEventListener('mousemove', evt => {\n      lastX = evt.offsetX || evt.pageX - canvas.offsetLeft;\n      lastY = evt.offsetY || evt.pageY - canvas.offsetTop;\n      dragged = true;\n\n      if (dragStart) {\n        const pt = ctx.transformedPoint(lastX, lastY);\n        ctx.translate(pt.x - dragStart.x, pt.y - dragStart.y);\n        redraw();\n      }\n    }, false);\n    canvas.addEventListener('mouseup', evt => {\n      dragStart = null;\n      if (!dragged) zoom(evt.shiftKey ? -1 : 1);\n    }, false);\n    const scaleFactor = 1.05; // eslint-disable-next-line vars-on-top\n\n    let zoom = function (clicks) {\n      const pt = ctx.transformedPoint(lastX, lastY);\n      ctx.translate(pt.x, pt.y); // eslint-disable-next-line no-restricted-properties\n\n      const factor = Math.pow(scaleFactor, clicks);\n      ctx.scale(factor, factor);\n      ctx.translate(-pt.x, -pt.y);\n      redraw();\n    };\n\n    const handleScroll = function (evt) {\n      // eslint-disable-next-line no-nested-ternary\n      const delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;\n      if (delta) zoom(delta);\n      return evt.preventDefault() && false;\n    };\n\n    canvas.addEventListener('DOMMouseScroll', handleScroll, false);\n    canvas.addEventListener('mousewheel', handleScroll, false);\n  } // Adds ctx.getTransform() - returns an SVGMatrix\n  // Adds ctx.transformedPoint(x,y) - returns an SVGPoint\n\n\n  function trackTransforms(ctx) {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    let xform = svg.createSVGMatrix();\n\n    ctx.getTransform = function () {\n      return xform;\n    };\n\n    const savedTransforms = [];\n    const {\n      save\n    } = ctx;\n\n    ctx.save = function () {\n      savedTransforms.push(xform.translate(0, 0));\n      return save.call(ctx);\n    };\n\n    const {\n      restore\n    } = ctx;\n\n    ctx.restore = function () {\n      xform = savedTransforms.pop();\n      return restore.call(ctx);\n    };\n\n    const {\n      scale\n    } = ctx;\n\n    ctx.scale = function (sx, sy) {\n      xform = xform.scaleNonUniform(sx, sy);\n      return scale.call(ctx, sx, sy);\n    };\n\n    const {\n      rotate\n    } = ctx;\n\n    ctx.rotate = function (radians) {\n      // eslint-disable-next-line no-mixed-operators\n      xform = xform.rotate(radians * 180 / Math.PI);\n      return rotate.call(ctx, radians);\n    };\n\n    const {\n      translate\n    } = ctx;\n\n    ctx.translate = function (dx, dy) {\n      xform = xform.translate(dx, dy);\n      return translate.call(ctx, dx, dy);\n    };\n\n    const {\n      transform\n    } = ctx;\n\n    ctx.transform = function (a, b, c, d, e, f) {\n      const m2 = svg.createSVGMatrix();\n      m2.a = a;\n      m2.b = b;\n      m2.c = c;\n      m2.d = d;\n      m2.e = e;\n      m2.f = f;\n      xform = xform.multiply(m2);\n      return transform.call(ctx, a, b, c, d, e, f);\n    };\n\n    const {\n      setTransform\n    } = ctx;\n\n    ctx.setTransform = function (a, b, c, d, e, f) {\n      xform.a = a;\n      xform.b = b;\n      xform.c = c;\n      xform.d = d;\n      xform.e = e;\n      xform.f = f;\n      return setTransform.call(ctx, a, b, c, d, e, f);\n    };\n\n    const pt = svg.createSVGPoint();\n\n    ctx.transformedPoint = function (x, y) {\n      pt.x = x;\n      pt.y = y;\n      return pt.matrixTransform(xform.inverse());\n    };\n  }\n}\n\n_s(Canvas, \"a98//AzzxnZRRKzDldX68VWr/6w=\");\n\n_c = Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/ec2-user/environment/Plaza/react-starter-main/src/Canvas.js"],"names":["React","useState","useEffect","socket","loadingCircle","Canvas","props","mode","setMode","enabled","setEnabled","data","setData","canvasSize","setCanvasSize","canvasRef","responseTimeout","on","receivedData","clearTimeout","encoded","decoded","Uint8Array","from","atob","c","charCodeAt","console","log","size","toColor","x","redraw","context","getContext","i","canvasWidth","width","canvasHeight","height","pixelWidth","pixelHeight","p1","transformedPoint","p2","clearRect","y","color","fillStyle","fillRect","document","getElementById","initializeCanvasManipulation","setTimeout","emit","test","TESTING_SIZE","a","Uint8ClampedArray","Math","random","padding","onCanvasClick","canvas","ctx","window","innerWidth","innerHeight","onresize","trackTransforms","translate","lastX","lastY","dragStart","dragged","addEventListener","evt","body","style","mozUserSelect","webkitUserSelect","userSelect","offsetX","pageX","offsetLeft","offsetY","pageY","offsetTop","pt","zoom","shiftKey","scaleFactor","clicks","factor","pow","scale","handleScroll","delta","wheelDelta","detail","preventDefault","svg","createElementNS","xform","createSVGMatrix","getTransform","savedTransforms","save","push","call","restore","pop","sx","sy","scaleNonUniform","rotate","radians","PI","dx","dy","transform","b","d","e","f","m2","multiply","setTransform","createSVGPoint","matrixTransform","inverse"],"mappings":"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","sourcesContent":["/* eslint-disable func-names */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable no-unused-vars */\n\n// Canvas that will display current pixel data.\nimport './Canvas.css';\nimport React, { useState, useEffect } from 'react';\n// eslint-disable-next-line import/no-cycle\nimport { socket } from './App';\nimport loadingCircle from './graphics/loading_circle.gif';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function Canvas(props) {\n  // STATES\n  const [mode, setMode] = useState(0); // current mode of canvas:\n  //  0 - Obtaining canvas data...\n  //  1 - Timeout obtaining canvas data...\n  //  2 - Success loading\n\n  const [enabled, setEnabled] = useState(false); // set this to True to be able to click on canvas\n  const [data, setData] = useState([]); // contains pixel data\n  // contains width (width=height) of canvas displayed pixels\n  const [canvasSize, setCanvasSize] = useState(0);\n  // NOTE: This is different from HTML canvas size\n\n  let canvasRef;\n  let responseTimeout;\n\n  // receive socketio canvas_state\n  socket.on('canvas_state', (receivedData) => {\n    if (mode === 0) {\n      clearTimeout(responseTimeout);\n\n      // obtain data and decode it from base 64 string:\n      const encoded = receivedData.data;\n      const decoded = Uint8Array.from(atob(encoded), (c) => c.charCodeAt(0)); // decode to bytes\n\n      console.log(`set data to ${decoded}`);\n\n      setData(decoded);\n      setCanvasSize(receivedData.size);\n\n      setMode(2);\n    }\n  });\n\n  // convert color index to rgb\n  function toColor(x) {\n    if (x === 0) {\n      return [255, 0, 0];\n    } if (x === 1) {\n      return [255, 69, 0];\n    } if (x === 2) {\n      return [255, 165, 0];\n    } if (x === 3) {\n      return [255, 174, 66];\n    } if (x === 4) {\n      return [255, 255, 0];\n    } if (x === 5) {\n      return [154, 205, 50];\n    } if (x === 6) {\n      return [0, 255, 0];\n    } if (x === 7) {\n      return [13, 152, 186];\n    } if (x === 8) {\n      return [0, 0, 255];\n    } if (x === 9) {\n      return [138, 43, 226];\n    } if (x === 10) {\n      return [238, 130, 238];\n    } if (x === 11) {\n      return [199, 21, 133];\n    } if (x === 12) {\n      return [255, 255, 255];\n    } if (x === 13) {\n      return [0, 0, 0];\n    }\n    return [0, 0, 0]; // index out of bounds\n  }\n  // uses 'data' state to create pixels\n  function redraw() {\n    const context = canvasRef.getContext('2d');\n    let i = 0;\n\n    const canvasWidth = canvasRef.width;\n    const canvasHeight = canvasRef.height;\n\n    const pixelWidth = (canvasHeight / canvasSize);\n    const pixelHeight = (canvasHeight / canvasSize);\n\n    const p1 = context.transformedPoint(0, 0);\n    const p2 = context.transformedPoint(canvasWidth, canvasHeight);\n    context.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\n\n    for (let x = 0; x < canvasSize; x += 1) {\n      for (let y = 0; y < canvasSize; y += 1) {\n        const color = toColor(data[i]);\n        i += 1;\n        context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n        context.fillRect(x * pixelWidth + x, y * pixelHeight + y, pixelWidth, pixelHeight);\n      }\n    }\n  }\n\n  // When canvas is loaded\n  useEffect(() => {\n    if (mode === 2) {\n      canvasRef = document.getElementById('canvas');\n      // eslint-disable-next-line no-use-before-define\n      initializeCanvasManipulation();\n    }\n  }, [mode]);\n\n  // send socketio request on load:\n  useEffect(() => {\n    if (mode === 0) {\n      setTimeout(() => {\n        socket.emit('canvas_request', {});\n        responseTimeout = setTimeout(() => {\n          setMode(1);\n        }, 5000);\n      }, 1800);\n    }\n  });\n\n  // testing function\n  function test() {\n    const TESTING_SIZE = 50;\n\n    setCanvasSize(TESTING_SIZE);\n\n    const a = new Uint8ClampedArray(TESTING_SIZE * TESTING_SIZE);\n    for (let x = 0; x < TESTING_SIZE * TESTING_SIZE; x += 1) {\n      // eslint-disable-next-line no-bitwise\n      a[x] = (Math.random() * (13 - 0 + 1)) << 0; // generate random int between 0 & 13\n    }\n\n    setData(a);\n    setMode(2);\n  }\n\n  if (mode === 0) { // CANVAS INFO NOT YET LOADED\n    return (\n      <div id=\"canvas\" className=\"canvas_placeholder\">\n        <div>\n          <img src={loadingCircle} alt=\"\" />\n        </div>\n      </div>\n    );\n  } if (mode === 1) { // TIMEOUT OBTAINING CANVAS DATA FROM SERVER\n    return (\n      <div id=\"canvas\" className=\"canvas_placeholder\">\n        <div>\n          <div style={{ padding: 40 }}>\n            <h3>Unable to Load Canvas :(</h3>\n            <p>\n              <i>\n                We were unable to get canvas data from our servers.\n                Try reloading the page or trying again later.\n              </i>\n            </p>\n            <button type=\"button\" onClick={test}>\n              Continue anyway\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  } if (mode === 2) { // SUCESSFULLY LOADED CANVAS DATA FROM SERVER\n    // eslint-disable-next-line no-inner-declarations\n    function onCanvasClick() {\n      // TODO: implement something here...\n    }\n\n    return (\n      <canvas\n        id=\"canvas\"\n        onClick={onCanvasClick}\n      />\n    );\n  }\n\n  function initializeCanvasManipulation() {\n    // IMPLEMENT CANVAS PANNING/ZOOMING     http://phrogz.net/tmp/canvas_zoom_to_cursor.html\n    const canvas = canvasRef;\n    const ctx = canvas.getContext('2d');\n\n    // automatically resize canvas\n    canvas.width = window.innerWidth - 50;\n    canvas.height = window.innerHeight - 80;\n\n    window.onresize = () => {\n      canvas.width = window.innerWidth - 50;\n      canvas.height = window.innerHeight - 80;\n\n      trackTransforms(ctx);\n      ctx.translate(canvas.width / 4, 0);\n      redraw();\n    };\n\n    trackTransforms(ctx);\n    ctx.translate(canvas.width / 4, 0);\n\n    redraw();\n\n    let lastX = canvas.width / 2; let\n      lastY = canvas.height / 2;\n    let dragStart; let dragged;\n    canvas.addEventListener('mousedown', (evt) => {\n      // eslint-disable-next-line no-multi-assign\n      document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';\n      lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);\n      lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);\n      dragStart = ctx.transformedPoint(lastX, lastY);\n      dragged = false;\n    }, false);\n    canvas.addEventListener('mousemove', (evt) => {\n      lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);\n      lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);\n      dragged = true;\n      if (dragStart) {\n        const pt = ctx.transformedPoint(lastX, lastY);\n        ctx.translate(pt.x - dragStart.x, pt.y - dragStart.y);\n        redraw();\n      }\n    }, false);\n    canvas.addEventListener('mouseup', (evt) => {\n      dragStart = null;\n      if (!dragged) zoom(evt.shiftKey ? -1 : 1);\n    }, false);\n\n    const scaleFactor = 1.05;\n    // eslint-disable-next-line vars-on-top\n    let zoom = function (clicks) {\n      const pt = ctx.transformedPoint(lastX, lastY);\n      ctx.translate(pt.x, pt.y);\n      // eslint-disable-next-line no-restricted-properties\n      const factor = Math.pow(scaleFactor, clicks);\n      ctx.scale(factor, factor);\n      ctx.translate(-pt.x, -pt.y);\n      redraw();\n    };\n\n    const handleScroll = function (evt) {\n      // eslint-disable-next-line no-nested-ternary\n      const delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;\n      if (delta) zoom(delta);\n      return evt.preventDefault() && false;\n    };\n    canvas.addEventListener('DOMMouseScroll', handleScroll, false);\n    canvas.addEventListener('mousewheel', handleScroll, false);\n  }\n\n  // Adds ctx.getTransform() - returns an SVGMatrix\n  // Adds ctx.transformedPoint(x,y) - returns an SVGPoint\n  function trackTransforms(ctx) {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    let xform = svg.createSVGMatrix();\n    ctx.getTransform = function () { return xform; };\n\n    const savedTransforms = [];\n    const { save } = ctx;\n    ctx.save = function () {\n      savedTransforms.push(xform.translate(0, 0));\n      return save.call(ctx);\n    };\n    const { restore } = ctx;\n    ctx.restore = function () {\n      xform = savedTransforms.pop();\n      return restore.call(ctx);\n    };\n\n    const { scale } = ctx;\n    ctx.scale = function (sx, sy) {\n      xform = xform.scaleNonUniform(sx, sy);\n      return scale.call(ctx, sx, sy);\n    };\n    const { rotate } = ctx;\n    ctx.rotate = function (radians) {\n      // eslint-disable-next-line no-mixed-operators\n      xform = xform.rotate(radians * 180 / Math.PI);\n      return rotate.call(ctx, radians);\n    };\n    const { translate } = ctx;\n    ctx.translate = function (dx, dy) {\n      xform = xform.translate(dx, dy);\n      return translate.call(ctx, dx, dy);\n    };\n    const { transform } = ctx;\n    ctx.transform = function (a, b, c, d, e, f) {\n      const m2 = svg.createSVGMatrix();\n      m2.a = a; m2.b = b; m2.c = c; m2.d = d; m2.e = e; m2.f = f;\n      xform = xform.multiply(m2);\n      return transform.call(ctx, a, b, c, d, e, f);\n    };\n    const { setTransform } = ctx;\n    ctx.setTransform = function (a, b, c, d, e, f) {\n      xform.a = a;\n      xform.b = b;\n      xform.c = c;\n      xform.d = d;\n      xform.e = e;\n      xform.f = f;\n      return setTransform.call(ctx, a, b, c, d, e, f);\n    };\n    const pt = svg.createSVGPoint();\n    ctx.transformedPoint = function (x, y) {\n      pt.x = x; pt.y = y;\n      return pt.matrixTransform(xform.inverse());\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}