{"ast":null,"code":"var _jsxFileName = \"/Users/coltonjohnson/Desktop/CS490/Plaza/react-starter-main/src/ColorBox.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Color picker that allows the selection of a color to be used by Canvas.js\n// import { useState } from 'react';\nexport function ColorBox(props) {\n  // this.props.color = color of the box\n  // console.log(props.color)\n  // hex value of the colors to return\n  const {\n    color,\n    clicked\n  } = props;\n  /*const colorsHex = {\n      0: '#FF0000', // red\n      1: '#FF4500', // red-orange\n      2: '#FF8C00', // orange\n      3: '#FFA500', // yellow-orange\n      4: '#FFFF00', // yellow\n      5: '#ADFF2F', // yellow-green\n      6: '#008000', // green\n      7: '#20B2AA', // blue-green\n      8: '#0000FF', // blue\n      9: '#800080', // blue-violet\n      10: '#EE82EE', // violet\n      11: '#9400D3', // red-violet\n      12: '#FFFFFF', // white\n      13: '#000000', // black\n  };*/\n  // convert color index to rgb\n\n  function toColor(x) {\n    if (x === 0) {\n      return [255, 0, 0];\n    }\n\n    if (x === 1) {\n      return [255, 69, 0];\n    }\n\n    if (x === 2) {\n      return [255, 165, 0];\n    }\n\n    if (x === 3) {\n      return [255, 174, 66];\n    }\n\n    if (x === 4) {\n      return [255, 255, 0];\n    }\n\n    if (x === 5) {\n      return [154, 205, 50];\n    }\n\n    if (x === 6) {\n      return [0, 255, 0];\n    }\n\n    if (x === 7) {\n      return [13, 152, 186];\n    }\n\n    if (x === 8) {\n      return [0, 0, 255];\n    }\n\n    if (x === 9) {\n      return [138, 43, 226];\n    }\n\n    if (x === 10) {\n      return [238, 130, 238];\n    }\n\n    if (x === 11) {\n      return [199, 21, 133];\n    }\n\n    if (x === 12) {\n      return [255, 255, 255];\n    }\n\n    if (x === 13) {\n      return [0, 0, 0];\n    }\n\n    return [0, 0, 0]; // index out of bounds\n  }\n\n  const bColor = toColor(color);\n  let boxStyle = {\n    backgroundColor: rgb(bColor),\n    border: '4px solid black',\n    borderRadius: '50%',\n    width: '35px',\n    height: '35px',\n    \"&:hover\": {\n      border: \"4px solid blue\"\n    }\n  }; // need a way to identify a singular color maybe index -> pass as a prop? \n\n  if (clicked) {\n    boxStyle = {\n      backgroundColor: bColor,\n      border: '4px solid blue',\n      borderRadius: '50%',\n      width: '35px',\n      height: '35px'\n    };\n  }\n\n  return (\n    /*#__PURE__*/\n    // do inline styling for color from props\n    _jsxDEV(\"div\", {\n      style: boxStyle,\n      onClick: props.onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  );\n}\n_c = ColorBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorBox\");","map":{"version":3,"sources":["/Users/coltonjohnson/Desktop/CS490/Plaza/react-starter-main/src/ColorBox.js"],"names":["ColorBox","props","color","clicked","toColor","x","bColor","boxStyle","backgroundColor","rgb","border","borderRadius","width","height","onClick"],"mappings":"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","sourcesContent":["// Color picker that allows the selection of a color to be used by Canvas.js\n// import { useState } from 'react';\n\nexport function ColorBox(props) {\n    // this.props.color = color of the box\n    // console.log(props.color)\n    // hex value of the colors to return\n\n    const { color, clicked } = props;\n\n    /*const colorsHex = {\n        0: '#FF0000', // red\n        1: '#FF4500', // red-orange\n        2: '#FF8C00', // orange\n        3: '#FFA500', // yellow-orange\n        4: '#FFFF00', // yellow\n        5: '#ADFF2F', // yellow-green\n        6: '#008000', // green\n        7: '#20B2AA', // blue-green\n        8: '#0000FF', // blue\n        9: '#800080', // blue-violet\n        10: '#EE82EE', // violet\n        11: '#9400D3', // red-violet\n        12: '#FFFFFF', // white\n        13: '#000000', // black\n    };*/\n\n    // convert color index to rgb\n    function toColor(x) {\n        if (x === 0) {\n            return [255, 0, 0];\n        } if (x === 1) {\n            return [255, 69, 0];\n        } if (x === 2) {\n            return [255, 165, 0];\n        } if (x === 3) {\n            return [255, 174, 66];\n        } if (x === 4) {\n            return [255, 255, 0];\n        } if (x === 5) {\n            return [154, 205, 50];\n        } if (x === 6) {\n            return [0, 255, 0];\n        } if (x === 7) {\n            return [13, 152, 186];\n        } if (x === 8) {\n            return [0, 0, 255];\n        } if (x === 9) {\n            return [138, 43, 226];\n        } if (x === 10) {\n            return [238, 130, 238];\n        } if (x === 11) {\n            return [199, 21, 133];\n        } if (x === 12) {\n            return [255, 255, 255];\n        } if (x === 13) {\n            return [0, 0, 0];\n        }\n        return [0, 0, 0]; // index out of bounds\n    }\n\n    const bColor = toColor(color);\n    let boxStyle = {\n        backgroundColor: rgb(bColor),\n        border: '4px solid black',\n        borderRadius: '50%',\n        width: '35px',\n        height: '35px',\n        \"&:hover\": {\n            border: \"4px solid blue\"\n          },\n    };\n\n    // need a way to identify a singular color maybe index -> pass as a prop? \n    if (clicked) {\n        boxStyle = {\n            backgroundColor: bColor,\n            border: '4px solid blue',\n            borderRadius: '50%',\n            width: '35px',\n            height: '35px',\n        };\n    }\n\n    return (\n        // do inline styling for color from props\n        <div style={boxStyle} onClick={props.onClick}></div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}