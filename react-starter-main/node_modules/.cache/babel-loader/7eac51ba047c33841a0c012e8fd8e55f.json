{"ast":null,"code":"var _jsxFileName = \"/Users/coltonjohnson/Desktop/CS490/Plaza/react-starter-main/src/App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport './App.css';\nimport io from 'socket.io-client';\nimport { React, useState, useRef, useEffect } from 'react'; // import project elements:\n// eslint-disable-next-line import/no-cycle\n\nimport { Canvas } from './Canvas';\nimport { ColorPicker } from './ColorPicker';\nimport { Chat } from './Chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const socket = io();\n\nfunction App() {\n  _s();\n\n  // TODO: Conditionally render/configure elements based on whether or not user is logged-in.\n  // Render colorpicker and chat only after canvas loads\n  // Set to useState(true) if you want to disable this for testing\n  const [isCanvasLoaded, setCanvasLoadState] = useState(false);\n  const [selectedColor, setSelectedColor] = useState(1); // set proper height of everything\n\n  useEffect(() => {\n    const colorPicker = document.getElementsByClassName('colorPicker');\n    const chat = document.getElementsByClassName('chat');\n    const horizontalElements = document.getElementsByClassName('horizontalElements');\n    colorPicker.height = horizontalElements.height - colorPicker.margin_top - colorPicker.margin_bottom;\n    chat.height = horizontalElements.height - chat.margin_top;\n  }); // *** Use this to run code when the canvas loads successfully ***\n\n  useEffect(() => {}, [isCanvasLoaded]);\n  useEffect(() => {\n    console.log('App.js color selected: ', selectedColor);\n  }, [selectedColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"horizontalElements\",\n    children: [isCanvasLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shadow container colorPicker\",\n      children: /*#__PURE__*/_jsxDEV(ColorPicker, {\n        color: selectedColor,\n        setSelectedColor: setSelectedColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container canvas\",\n      children: /*#__PURE__*/_jsxDEV(Canvas, {\n        setCanvasLoadState: setCanvasLoadState,\n        selectedColor: selectedColor,\n        setSelectedColor: setSelectedColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), isCanvasLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shadow container chat\",\n      children: /*#__PURE__*/_jsxDEV(Chat, {\n        username: \"Default User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"WJVd0zj145mrqycQ6WnRhJg7xM0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/coltonjohnson/Desktop/CS490/Plaza/react-starter-main/src/App.js"],"names":["io","React","useState","useRef","useEffect","Canvas","ColorPicker","Chat","socket","App","isCanvasLoaded","setCanvasLoadState","selectedColor","setSelectedColor","colorPicker","document","getElementsByClassName","chat","horizontalElements","height","margin_top","margin_bottom","console","log"],"mappings":";;;AAAA;AACA,OAAO,WAAP;AACA,OAAOA,EAAP,MAAe,kBAAf;AAEA,SACIC,KADJ,EACWC,QADX,EACqBC,MADrB,EAC6BC,SAD7B,QAEO,OAFP,C,CAIA;AACA;;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,IAAT,QAAqB,QAArB;;AAEA,OAAO,MAAMC,MAAM,GAAGR,EAAE,EAAjB;;AAEP,SAASS,GAAT,GAAe;AAAA;;AACX;AAEA;AACA;AACA,QAAM,CAACC,cAAD,EAAiBC,kBAAjB,IAAuCT,QAAQ,CAAC,KAAD,CAArD;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,CAAD,CAAlD,CANW,CAOX;;AACAE,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,WAAW,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,aAAhC,CAApB;AACA,UAAMC,IAAI,GAAGF,QAAQ,CAACC,sBAAT,CAAgC,MAAhC,CAAb;AAEA,UAAME,kBAAkB,GAAGH,QAAQ,CAACC,sBAAT,CAAgC,oBAAhC,CAA3B;AAEAF,IAAAA,WAAW,CAACK,MAAZ,GAAqBD,kBAAkB,CAACC,MAAnB,GAA4BL,WAAW,CAACM,UAAxC,GACnBN,WAAW,CAACO,aADd;AAGAJ,IAAAA,IAAI,CAACE,MAAL,GAAcD,kBAAkB,CAACC,MAAnB,GAA4BF,IAAI,CAACG,UAA/C;AACH,GAVQ,CAAT,CARW,CAoBX;;AACAhB,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACM,cAAD,CAAX,CAAT;AACAN,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCX,aAAvC;AAED,GAHQ,EAGN,CAACA,aAAD,CAHM,CAAT;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,eACKF,cAAc,iBAEP;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA,6BACI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEE,aAApB;AAAmC,QAAA,gBAAgB,EAAEC;AAArD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHZ,eAQI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACI,QAAC,MAAD;AACI,QAAA,kBAAkB,EAAEF,kBADxB;AAEI,QAAA,aAAa,EAAEC,aAFnB;AAGI,QAAA,gBAAgB,EAAEC;AAHtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YARJ,EAgBKH,cAAc,iBAEX;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAlBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH;;GApDQD,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["/* eslint-disable no-unused-vars */\nimport './App.css';\nimport io from 'socket.io-client';\n\nimport {\n    React, useState, useRef, useEffect,\n} from 'react';\n\n// import project elements:\n// eslint-disable-next-line import/no-cycle\nimport { Canvas } from './Canvas';\nimport { ColorPicker } from './ColorPicker';\nimport { Chat } from './Chat';\n\nexport const socket = io();\n\nfunction App() {\n    // TODO: Conditionally render/configure elements based on whether or not user is logged-in.\n\n    // Render colorpicker and chat only after canvas loads\n    // Set to useState(true) if you want to disable this for testing\n    const [isCanvasLoaded, setCanvasLoadState] = useState(false);\n    const [selectedColor, setSelectedColor] = useState(1);\n    // set proper height of everything\n    useEffect(() => {\n        const colorPicker = document.getElementsByClassName('colorPicker');\n        const chat = document.getElementsByClassName('chat');\n\n        const horizontalElements = document.getElementsByClassName('horizontalElements');\n\n        colorPicker.height = horizontalElements.height - colorPicker.margin_top\n        - colorPicker.margin_bottom;\n\n        chat.height = horizontalElements.height - chat.margin_top;\n    });\n\n    // *** Use this to run code when the canvas loads successfully ***\n    useEffect(() => {}, [isCanvasLoaded]);\n    useEffect(() => {\n      console.log('App.js color selected: ', selectedColor);\n\n    }, [selectedColor]);\n\n    return (\n        <div className=\"horizontalElements\">\n            {isCanvasLoaded\n                && (\n                    <div className=\"shadow container colorPicker\">\n                        <ColorPicker color={selectedColor} setSelectedColor={setSelectedColor}/>\n                    </div>\n                )}\n\n            <div className=\"container canvas\">\n                <Canvas\n                    setCanvasLoadState={setCanvasLoadState}\n                    selectedColor={selectedColor}\n                    setSelectedColor={setSelectedColor}\n                />\n            </div>\n\n            {isCanvasLoaded\n            && (\n                <div className=\"shadow container chat\">\n                    <Chat username=\"Default User\" />\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}